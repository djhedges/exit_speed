#!/usr/bin/python3
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Converts a data log generated by exit speed to the new proto format."""
import os
import pathlib
import time

import dateutil.parser
from absl import app
from absl import flags
from absl import logging

from exit_speed import common_lib
from exit_speed import data_logger
from exit_speed import exit_speed_pb2
from exit_speed import main as exit_speed
from exit_speed import postgres
from exit_speed import tracks

FLAGS = flags.FLAGS
flags.DEFINE_string('data_dir', None, 'Path to a directory with data files.')
FLAGS.set_default('data_log_path', '/tmp')  # Dont clobber on import.
FLAGS.set_default('led_brightness', 0.05)


PREFIX_PROTO_MAP = {
  'AccelerometerProcess': exit_speed_pb2.Accelerometer,
  'GPSProcess': exit_speed_pb2.Gps,
  'GyroscopeProcess': exit_speed_pb2.Gyroscope,
  'LabjackProcess': exit_speed_pb2.Labjack,
  'WBO2Process': exit_speed_pb2.WBO2,
}

def LoadProtos(data_dir):
  prefix_protos = {}
  for file_name in os.listdir(data_dir):
    for prefix, proto_class in PREFIX_PROTO_MAP.items():
      if file_name.startswith(prefix):
        logger = data_logger.Logger(os.path.join(data_dir, file_name),
                                    proto_class=proto_class)
        prefix_protos.setdefault(prefix, []).extend(logger.ReadProtos())
  return prefix_protos


def CopyProtosToPostgres(prefix_protos):
  for prefix, protos in prefix_protos.items():
    logging.info('Prefix: %s, proto count: %d', prefix, len(protos))
    db_writer = postgres.Postgres(protos[0].__class__, start_process=False)
    for proto in protos:
      db_writer.AddProtoToQueue(proto)
      db_writer.ExportProto()


def ReRunMain(data_dir, protos):
  path = pathlib.Path(data_dir)
  es = exit_speed.ExitSpeed(live_data=False)
  es.postgres = postgres.PostgresWithoutPrepare()
  es.session = common_lib.Session(
    time=dateutil.parser.parse(path.name),
    track=tracks.FindClosestTrack({'lat': protos[0].lat,
																	 'lon': protos[0].lon}),
    car=path.parts[-3],
    live_data=False)
  es.postgres.AddToQueue(es.session)
  es.postgres.AddToQueue(postgres.LapStart(number=es.lap_number,
                         start_time=es.session.time))
  logging.info(es.session)
  for proto in protos:
    es.point = proto
    es.ProcessLap()
  es.stop_process_signal = True
  time.sleep(2)


def main(unused_argv):
  prefix_protos = LoadProtos(FLAGS.data_dir)
  ReRunMain(FLAGS.data_dir, prefix_protos['GPSProcess'])
  CopyProtosToPostgres(prefix_protos)


if __name__ == '__main__':
  flags.mark_flag_as_required('data_dir')
  app.run(main)
