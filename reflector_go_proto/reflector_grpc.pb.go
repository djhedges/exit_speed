// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reflector_go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReflectClient is the client API for Reflect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReflectClient interface {
	ExportPoint(ctx context.Context, in *PointUpdate, opts ...grpc.CallOption) (*Response, error)
	NewLap(ctx context.Context, in *LapNumber, opts ...grpc.CallOption) (*Response, error)
	UpdateLapDuration(ctx context.Context, in *LapDuration, opts ...grpc.CallOption) (*Response, error)
}

type reflectClient struct {
	cc grpc.ClientConnInterface
}

func NewReflectClient(cc grpc.ClientConnInterface) ReflectClient {
	return &reflectClient{cc}
}

func (c *reflectClient) ExportPoint(ctx context.Context, in *PointUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/reflector.Reflect/ExportPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reflectClient) NewLap(ctx context.Context, in *LapNumber, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/reflector.Reflect/NewLap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reflectClient) UpdateLapDuration(ctx context.Context, in *LapDuration, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/reflector.Reflect/UpdateLapDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReflectServer is the server API for Reflect service.
// All implementations must embed UnimplementedReflectServer
// for forward compatibility
type ReflectServer interface {
	ExportPoint(context.Context, *PointUpdate) (*Response, error)
	NewLap(context.Context, *LapNumber) (*Response, error)
	UpdateLapDuration(context.Context, *LapDuration) (*Response, error)
	mustEmbedUnimplementedReflectServer()
}

// UnimplementedReflectServer must be embedded to have forward compatible implementations.
type UnimplementedReflectServer struct {
}

func (UnimplementedReflectServer) ExportPoint(context.Context, *PointUpdate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPoint not implemented")
}
func (UnimplementedReflectServer) NewLap(context.Context, *LapNumber) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLap not implemented")
}
func (UnimplementedReflectServer) UpdateLapDuration(context.Context, *LapDuration) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLapDuration not implemented")
}
func (UnimplementedReflectServer) mustEmbedUnimplementedReflectServer() {}

// UnsafeReflectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReflectServer will
// result in compilation errors.
type UnsafeReflectServer interface {
	mustEmbedUnimplementedReflectServer()
}

func RegisterReflectServer(s *grpc.Server, srv ReflectServer) {
	s.RegisterService(&_Reflect_serviceDesc, srv)
}

func _Reflect_ExportPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReflectServer).ExportPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reflector.Reflect/ExportPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReflectServer).ExportPoint(ctx, req.(*PointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reflect_NewLap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LapNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReflectServer).NewLap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reflector.Reflect/NewLap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReflectServer).NewLap(ctx, req.(*LapNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reflect_UpdateLapDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LapDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReflectServer).UpdateLapDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reflector.Reflect/UpdateLapDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReflectServer).UpdateLapDuration(ctx, req.(*LapDuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reflect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reflector.Reflect",
	HandlerType: (*ReflectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportPoint",
			Handler:    _Reflect_ExportPoint_Handler,
		},
		{
			MethodName: "NewLap",
			Handler:    _Reflect_NewLap_Handler,
		},
		{
			MethodName: "UpdateLapDuration",
			Handler:    _Reflect_UpdateLapDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reflector.proto",
}
